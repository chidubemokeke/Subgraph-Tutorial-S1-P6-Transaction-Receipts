enum Status {
  Success
  Failed
}

enum MarketPlace {
  OpenSeaV1
  OpenSeaV2
  SeaPort
  Unknown
}

# Account entity representing a user account in the system
type Owner @entity {
  "User's address, which serves as a unique identifier"
  id: ID!

  "List of Owned kitties by this account."
  kitties: [CryptoKitty!]! @derivedFrom(field: "owner")

  "All transactions involving the user"
  transactions: [Transaction!]! @derivedFrom(field: "participant")
}

# CryptoKitty entity representing a specific NFT
type CryptoKitty @entity {
  "Unique identifier for the CryptoKitty transfer event"
  id: ID!

  "Reference to the transaction's owner (either buyer or seller)"
  owner: Owner!

  "The unique token ID"
  tokenId: BigInt!

  "Counter for how many times this NFT was involved in a transaction"
  transactionCount: BigInt!

  "Total value for all transactions related to this NFT"
  totalSold: BigInt!

  "Timestamp of the transaction"
  createdAt: BigInt!

  "Transaction hash of the transfer"
  txHash: Bytes!
}

# Transaction entity representing a sale or transfer of NFTs
type Transaction @entity {
  "Unique identifier for each transaction."
  id: ID!

  "Reference to the owner of the transaction (either buyer or seller)"
  participant: Owner!

  "Seller's address (important for separating mint from sale transactions)"
  seller: Bytes!

  "Buyer's address"
  buyer: Bytes!

  "Unique identifier of the NFT being transferred NFT/TokenId."
  referenceId: BigInt!

  "Transaction status (Success or Failed)"
  status: Status!

  "Field to indicate if the transaction is a mint"
  isMint: Boolean!

  "The marketplace"
  marketPlace: MarketPlace!

  "Amount sold (if applicable)"
  amountSold: BigInt!

  "Hash of the transaction."
  txHash: Bytes!
}
